type Query {
galleries(input: GalleryInput): [AnimalGalleryType]
animals(name: String): [AnimalType]
keepers(name: String): [AnimalKeeperType]
debug: DjangoDebug
}

type AnimalGalleryType {
id: UUID!
forAnimal: AnimalType
forKeeper: AnimalKeeperType
image: String!
createdDate: DateTime!
modifiedDate: DateTime!
}

# Leverages the internal Python implementation of UUID (uuid.UUID) to provide native UUID objects
# in fields, resolvers and input.
scalar UUID

type AnimalType {
id: UUID!
name: String!
image: String!
createdDate: DateTime!
modifiedDate: DateTime!
}

# The `DateTime` scalar type represents a DateTime
# value as specified by
# [iso8601](https://en.wikipedia.org/wiki/ISO_8601).
scalar DateTime

type AnimalKeeperType {
id: UUID!
name: String!
originCountry: String!
animal: AnimalType!
image: String!
birthDate: DateTime!
createdDate: DateTime!
modifiedDate: DateTime!
}

input GalleryInput {
idAnimal: UUID
idKeeper: UUID
}

# Debugging information for the current query.
type DjangoDebug {
# Executed SQL queries for this API query.
sql: [DjangoDebugSQL]

# Raise exceptions for this API query.
exceptions: [DjangoDebugException]
}

# Represents a single database query made to a Django managed DB.
type DjangoDebugSQL {
# The type of database being used (e.g. postrgesql, mysql, sqlite).
vendor: String!

# The Django database alias (e.g. 'default').
alias: String!

# The actual SQL sent to this database.
sql: String

# Duration of this database query in seconds.
duration: Float!

# The raw SQL of this query, without params.
rawSql: String!

# JSON encoded database query parameters.
params: String!

# Start time of this database query.
startTime: Float!

# Stop time of this database query.
stopTime: Float!

# Whether this database query took more than 10 seconds.
isSlow: Boolean!

# Whether this database query was a SELECT.
isSelect: Boolean!

# Postgres transaction ID if available.
transId: String

# Postgres transaction status if available.
transStatus: String

# Postgres isolation level if available.
isoLevel: String

# Postgres connection encoding if available.
encoding: String
}

# Represents a single exception raised.
type DjangoDebugException {
# The class of the exception
excType: String!

# The message of the exception
message: String!

# The stack trace
stack: String!
}

type Mutation {
changeAnimalName(id: String, name: String): AnimalType
changeAnimalKeeperName(id: String, name: String): AnimalKeeperType
}
